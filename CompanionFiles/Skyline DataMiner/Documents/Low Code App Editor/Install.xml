<?xml version="1.0" encoding="utf-8" ?>
<DMSScript options="272" xmlns="http://www.skyline.be/automation">
	<Name>Install</Name>
	<Description />
	<Type>Automation</Type>
	<Author>SKYLINE2\RepoManager</Author>
	<CheckSets>FALSE</CheckSets>
	<Folder />

	<Protocols>
	</Protocols>

	<Memory>
	</Memory>

	<Parameters>
	</Parameters>

	<Script>
		<Exe id="1" type="csharp">
			<Value>
				<![CDATA[/*
****************************************************************************
*  Copyright (c) 2024,  Skyline Communications NV  All Rights Reserved.    *
****************************************************************************

By using this script, you expressly agree with the usage terms and
conditions set out below.
This script and all related materials are protected by copyrights and
other intellectual property rights that exclusively belong
to Skyline Communications.

A user license granted for this script is strictly for personal use only.
This script may not be used in any way by anyone without the prior
written consent of Skyline Communications. Any sublicensing of this
script is forbidden.

Any modifications to this script by the user are only allowed for
personal use and within the intended purpose of the script,
and will remain the sole responsibility of the user.
Skyline Communications will not be responsible for any damages or
malfunctions whatsoever of the script resulting from a modification
or adaptation by the user.

The content of this script is confidential information.
The user hereby agrees to keep this confidential information strictly
secret and confidential and not to disclose or reveal it, in whole
or in part, directly or indirectly to any person, entity, organization
or administration without the prior written consent of
Skyline Communications.

Any inquiries can be addressed to:

	Skyline Communications NV
	Ambachtenstraat 33
	B-8870 Izegem
	Belgium
	Tel.	: +32 51 31 35 69
	Fax.	: +32 51 31 01 29
	E-mail	: info@skyline.be
	Web		: www.skyline.be
	Contact	: Ben Vandenberghe

****************************************************************************
Revision History:

DATE		VERSION		AUTHOR			COMMENTS

06/08/2024	1.0.0.1		AMA, Skyline	Initial version
****************************************************************************
*/
using System;

using Install_1.DOM;
using Install_1.Images;
using Install_1.LCA;
using Install_1.Themes;

using Skyline.AppInstaller;
using Skyline.DataMiner.Automation;
using Skyline.DataMiner.Net.AppPackages;

//---------------------------------
// DOM\DomEditorException.cs
//---------------------------------
namespace Install_1.DOM
{
	using System;
	using System.Runtime.Serialization;

	[Serializable]
	public class DomEditorException : Exception
	{
		public DomEditorException()
		{
		}

		public DomEditorException(string message) : base(message)
		{
		}

		public DomEditorException(string message, Exception inner) : base(message, inner)
		{
		}

		protected DomEditorException(
			SerializationInfo info,
			StreamingContext context) : base(info, context)
		{
		}
	}
}
//---------------------------------
// DOM\DomImporter.cs
//---------------------------------
// Ignore Spelling: Json

namespace Install_1.DOM
{
	using System;
	using System.IO;
	using System.Linq;
	using System.Text;

	using Newtonsoft.Json;
	using Newtonsoft.Json.Serialization;

	using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
	using Skyline.DataMiner.Net.Apps.Modules;
	using Skyline.DataMiner.Net.Jobs;
	using Skyline.DataMiner.Net.ManagerStore;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Net.Messages.SLDataGateway;
	using Skyline.DataMiner.Net.Sections;

	public class DomImporter
	{
		private static readonly JsonSerializer JsonSerializer = JsonSerializer.Create(new JsonSerializerSettings
		{
			TypeNameHandling = TypeNameHandling.Auto,
			ContractResolver = new DefaultContractResolver { IgnoreSerializableInterface = true },
		});

		private readonly ModuleSettingsHelper moduleSettingsHelper;
		private readonly Func<DMSMessage[], DMSMessage[]> sendSLNetMessages;
		private DomHelper domHelper;
		private ItemProgressEventArgs itemProgressEventArgs;
		private JsonTextReader jsonTextReader;

		public DomImporter(Func<DMSMessage[], DMSMessage[]> sendSLNetMessages)
		{
			this.sendSLNetMessages = sendSLNetMessages ?? throw new ArgumentNullException(nameof(sendSLNetMessages));
			moduleSettingsHelper = new ModuleSettingsHelper(sendSLNetMessages);
		}

		public event EventHandler<ItemProgressEventArgs> Progress;

		public void Import(string path)
		{
			InitProgressCounter();

			try
			{
				using (var reader = new Reader(path))
				{
					jsonTextReader = reader.JsonTextReader;
					jsonTextReader.Read(); // start array
					while (jsonTextReader.Read() && jsonTextReader.TokenType == JsonToken.StartObject)
					{
						ImportModule();
						jsonTextReader.Read(); // end object
					}
				}
			}
			catch (CrudFailedException e)
			{
				throw new DomEditorException(String.Join("\n", e.TraceData.ErrorData), e);
			}
			catch (IOException e)
			{
				throw new DomEditorException(e.Message, e);
			}
			catch (JsonException e)
			{
				throw new DomEditorException("File has an invalid structure.", e);
			}
		}

		private void Import<T>(ICrudHelperComponent<T> crudHelperComponent, FilterElement<T> equalityFilter, T dataType)
			where T : DataType
		{
			bool exists = crudHelperComponent.Read(equalityFilter).Any();

			if (exists)
			{
				crudHelperComponent.Update(dataType);
			}
			else
			{
				crudHelperComponent.Create(dataType);
			}

			IncrementProgressCounter(1);
		}

		private void ImportDomBehaviorDefinitions()
		{
			jsonTextReader.Read();
			jsonTextReader.Read();
			while (jsonTextReader.Read() && jsonTextReader.TokenType == JsonToken.StartObject)
			{
				var behaviorDefinition = JsonSerializer.Deserialize<DomBehaviorDefinition>(jsonTextReader);
				Import(
					domHelper.DomBehaviorDefinitions,
					DomBehaviorDefinitionExposers.Id.Equal(behaviorDefinition.ID),
					behaviorDefinition);
			}
		}

		private void ImportDomDefinitions()
		{
			jsonTextReader.Read();
			jsonTextReader.Read();
			while (jsonTextReader.Read() && jsonTextReader.TokenType == JsonToken.StartObject)
			{
				var domDefinition = JsonSerializer.Deserialize<DomDefinition>(jsonTextReader);
				Import(domHelper.DomDefinitions, DomDefinitionExposers.Id.Equal(domDefinition.ID), domDefinition);
			}
		}

		private void ImportDomTemplates()
		{
			jsonTextReader.Read();
			jsonTextReader.Read();
			while (jsonTextReader.Read() && jsonTextReader.TokenType == JsonToken.StartObject)
			{
				var domTemplate = JsonSerializer.Deserialize<DomTemplate>(jsonTextReader);
				Import(domHelper.DomTemplates, DomTemplateExposers.Id.Equal(domTemplate.ID), domTemplate);
			}
		}

		private void ImportDomInstances()
		{
			jsonTextReader.Read();
			jsonTextReader.Read();
			while (jsonTextReader.Read() && jsonTextReader.TokenType == JsonToken.StartObject)
			{
				var domInstance = JsonSerializer.Deserialize<DomInstance>(jsonTextReader);
				Import(domHelper.DomInstances, DomInstanceExposers.Id.Equal(domInstance.ID), domInstance);
			}
		}

		private void ImportModule()
		{
			jsonTextReader.Read(); // property name
			jsonTextReader.Read(); // start object
			var moduleSettings = JsonSerializer.Deserialize<ModuleSettings>(jsonTextReader);
			ImportModuleSettings(moduleSettings);
			domHelper = new DomHelper(sendSLNetMessages, moduleSettings.ModuleId);

			ImportSectionDefinitions();
			ImportDomBehaviorDefinitions();
			ImportDomDefinitions();
			ImportDomTemplates();
			ImportDomInstances();
		}

		private void ImportModuleSettings(ModuleSettings moduleSettings)
		{
			Import(
				moduleSettingsHelper.ModuleSettings,
				ModuleSettingsExposers.ModuleId.Equal(moduleSettings.ModuleId),
				moduleSettings);
		}

		private void ImportSectionDefinitions()
		{
			jsonTextReader.Read();
			jsonTextReader.Read();
			while (jsonTextReader.Read() && jsonTextReader.TokenType == JsonToken.StartObject)
			{
				var sectionDefinition = JsonSerializer.Deserialize<CustomSectionDefinition>(jsonTextReader);
				Import(
					domHelper.SectionDefinitions,
					SectionDefinitionExposers.ID.Equal(sectionDefinition.ID),
					sectionDefinition);
			}
		}

		private void InitProgressCounter()
		{
			itemProgressEventArgs = new ItemProgressEventArgs(0);
			Progress?.Invoke(this, itemProgressEventArgs);
		}

		private void IncrementProgressCounter(int items)
		{
			itemProgressEventArgs.Items += items;
			Progress?.Invoke(this, itemProgressEventArgs);
		}

		private sealed class Reader : IDisposable
		{
			private readonly FileStream fileStream;
			private readonly StreamReader streamReader;

			public Reader(string path)
			{
				try
				{
					fileStream = new FileStream(path, FileMode.Open);
					streamReader = new StreamReader(fileStream, Encoding.UTF8);
					JsonTextReader = new JsonTextReader(streamReader);
					JsonTextReader.SupportMultipleContent = true;
				}
				catch
				{
					Dispose();
					throw;
				}
			}

			public JsonTextReader JsonTextReader { get; }

			public void Dispose()
			{
				((IDisposable)JsonTextReader)?.Dispose();
				streamReader?.Dispose();
				fileStream?.Dispose();
			}
		}
	}
}
//---------------------------------
// DOM\DomInstaller.cs
//---------------------------------
namespace Install_1.DOM
{
	using System;
	using System.IO;

	using Skyline.DataMiner.Net;
	using Skyline.DataMiner.Net.AppPackages;

	public class DomInstaller
	{
		private const string DOM_FOLDERPATH = @"CompanionFiles\DOM\";

		private readonly AppInstallContext context;
		private readonly Action<string> logMethod;

		private readonly DomImporter domImporter;

		/// <summary>
		/// Initializes a new instance of the <see cref="DomInstaller"/> class.
		/// </summary>
		/// <param name="connection">SLNet raw connection. Can be obtained via Engine object.</param>
		/// <param name="context">
		/// Provides the context to which the installer has access to. Skyline.DataMiner.Net.AppPackages.AppInstallContext object is automatically provided by the Automation script.
		/// </param>
		/// <param name="logMethod">The app installers log method, used to write to the SLAppPackageInstaller.txt.</param>
		public DomInstaller(IConnection connection, AppInstallContext context, Action<string> logMethod)
		{
			// Null checks still required / valid input data check
			this.context = context;
			this.logMethod = logMethod;
			domImporter = new DomImporter(connection.HandleMessages);
			domImporter.Progress += DomImporter_Progress;
		}

		/// <summary>
		/// Installs all exported DOM files from the DOM editor script in the AppContent of the package on the DMS.
		/// </summary>
		public void InstallDefaultContent()
		{
			Log("Installing DOM items");

			foreach (var exportedDomJson in Directory.GetFiles(context.AppContentPath + DOM_FOLDERPATH, "*.json"))
			{
				Log("Installing " + exportedDomJson);
				domImporter.Import(exportedDomJson);
			}
		}

		/// <summary>
		/// Logs the provided message into the logfile "C:\Skyline DataMiner\Logging\SLAppPackageInstaller.txt".
		/// The message will also be shown during installation with the DataMiner Application
		/// Package Installer from the Skyline TaskBar Utility.
		/// </summary>
		/// <param name="message">A message you want to log or show during installation.</param>
		public void Log(string message)
		{
			logMethod(message);
		}

		private void DomImporter_Progress(object sender, ItemProgressEventArgs e)
		{
			Log("Installed " + e.Items + " DOM item(s)");
		}
	}
}
//---------------------------------
// DOM\ItemProgressEventArgs.cs
//---------------------------------
namespace Install_1.DOM
{
	using System;

	public class ItemProgressEventArgs : EventArgs
	{
		public ItemProgressEventArgs(int items) => Items = items;

		public int Items { get; internal set; }
	}
}
//---------------------------------
// Extensions.cs
//---------------------------------
namespace Install_1
{
	using System;

	using Skyline.DataMiner.Net;
	using Skyline.DataMiner.Net.Exceptions;
	using Skyline.DataMiner.Net.Messages;
	using Skyline.DataMiner.Net.Messages.Advanced;

	internal static class Extensions
	{
		public static void SyncFile(this IConnection connection, string filePath, Action<string> logger = null)
		{
			SetDataMinerInfoMessage message = new SetDataMinerInfoMessage
			{
				What = 41,
				StrInfo1 = filePath,
				IInfo2 = 34,
			};

			var response = connection.HandleSingleResponseMessage(message);
			if(response == null)
			{
				logger?.Invoke($"Could not sync file, did not receive a response. Path: {filePath}");
			}

			if (response is CreateProtocolFileResponse createProtocolFileResponse && createProtocolFileResponse.ErrorCode != 0)
			{
				logger?.Invoke($"Could not sync file, the returned error code was {createProtocolFileResponse.ErrorCode}. Path: {filePath}");
			}
		}
	}
}

//---------------------------------
// Images\ImageInstaller.cs
//---------------------------------
namespace Install_1.Images
{
	using System;
	using System.IO;

	using Skyline.DataMiner.Net;
	using Skyline.DataMiner.Net.AppPackages;

	public class ImageInstaller
	{
		private const string Images_FOLDERPATH = @"CompanionFiles\Images";
		private const string Images_Directory = @"C:\Skyline DataMiner\Dashboards\_IMAGES";

		private readonly IConnection connection;
		private readonly AppInstallContext context;
		private readonly Action<string> logMethod;

		/// <summary>
		/// Initializes a new instance of the <see cref="ImageInstaller"/> class.
		/// </summary>
		/// <param name="connection">SLNet raw connection. Can be obtained via Engine object.</param>
		/// <param name="context">
		/// Provides the context to which the installer has access to. Skyline.DataMiner.Net.AppPackages.AppInstallContext object is automatically provided by the Automation script.
		/// </param>
		/// <param name="logMethod">The app installers log method, used to write to the SLAppPackageInstaller.txt.</param>
		public ImageInstaller(IConnection connection, AppInstallContext context, Action<string> logMethod)
		{
			this.connection = connection;
			this.context = context;
			this.logMethod = logMethod;
		}

		/// <summary>
		/// Installs all provided images in the AppContent of the package on the DMS.
		/// </summary>
		public void InstallDefaultContent()
		{
			Log("Low Code App Images Installation");

			// Check if images folder exists
			if (!Directory.Exists(Images_Directory))
			{
				Log("C:\\Skyline DataMiner\\Dashboards\\_IMAGES directory does not exists, creating it.");
				Directory.CreateDirectory(Images_Directory);
			}

			var images = Directory.GetFiles(context.AppContentPath + Images_FOLDERPATH);
			Log($"Installing {images.Length} image(s).");
			for (int i = 0; i < images.Length; i++)
			{
				var image = images[i];
				var path = Path.Combine(Images_Directory, Path.GetFileName(image));
				if (File.Exists(path))
				{
					Log($"[{i + 1}/{images.Length}] '{image}' already exists, ignoring this image.");
				}
				else
				{
					File.Copy(image, path);
					connection.SyncFile(path);
					Log($"[{i + 1}/{images.Length}] Installed {Path.GetFileName(image)}");
				}
			}
		}

		/// <summary>
		/// Logs the provided message into the logfile "C:\Skyline DataMiner\Logging\SLAppPackageInstaller.txt".
		/// The message will also be shown during installation with the DataMiner Application
		/// Package Installer from the Skyline TaskBar Utility.
		/// </summary>
		/// <param name="message">A message you want to log or show during installation.</param>
		public void Log(string message)
		{
			logMethod(message);
		}
	}
}
//---------------------------------
// Install_1.cs
//---------------------------------

/// <summary>
/// DataMiner Script Class.
/// </summary>
internal class Script
{
	/// <summary>
	/// The script entry point.
	/// </summary>
	/// <param name="engine">Provides access to the Automation engine.</param>
	/// <param name="context">Provides access to the installation context.</param>
	[AutomationEntryPoint(AutomationEntryPointType.Types.InstallAppPackage)]
	public void Install(IEngine engine, AppInstallContext context)
	{
		try
		{
			engine.Timeout = new TimeSpan(0, 10, 0);
			engine.GenerateInformation("Starting installation");
			var installer = new AppInstaller(Engine.SLNetRaw, context);
			installer.InstallDefaultContent();

			// Custom installation logic can be added here for each individual install package.
			var domInstaller = new DomInstaller(Engine.SLNetRaw, context, installer.Log);
			domInstaller.InstallDefaultContent();

			// Install app themes
			var themeInstaller = new ThemeInstaller(Engine.SLNetRaw, context, installer.Log);
			themeInstaller.InstallDefaultContent();

			// Create image installer
			var imageInstaller = new ImageInstaller(Engine.SLNetRaw, context, installer.Log);
			imageInstaller.InstallDefaultContent();

			// Install the low code app
			var lcaInstaller = new LcaInstaller(context, installer.Log);
			lcaInstaller.InstallDefaultContent();
		}
		catch (Exception e)
		{
			engine.ExitFail("Exception encountered during installation: " + e);
		}
	}
}
//---------------------------------
// LCA\InstallOptions.cs
//---------------------------------
// Ignore Spelling: LCA

namespace Install_1.LCA
{
	using Newtonsoft.Json;

	public class InstallOptions
	{
		[JsonProperty("Overwrite")]
		public bool OverwritePreviousVersions { get; set; }
	}
}

//---------------------------------
// LCA\LcaInstaller.cs
//---------------------------------
// Ignore Spelling: LCA app apps logfile

namespace Install_1.LCA
{
	using System;
	using System.Collections.Generic;
	using System.IO;
	using System.Linq;

	using Newtonsoft.Json;
	using Newtonsoft.Json.Linq;

	using Skyline.DataMiner.Net.AppPackages;

	public class LcaInstaller
	{
		private const string InstallOptionsFileName = "InstallOptions.json";
		private const string LCA_FOLDERPATH = @"CompanionFiles\LCA";
		private const string ApplicationsDirectory = @"C:\Skyline DataMiner\applications";

		private readonly AppInstallContext context;
		private readonly InstallOptions options;
		private readonly Action<string> logMethod;

		/// <summary>
		/// Initializes a new instance of the <see cref="LcaInstaller"/> class.
		/// </summary>
		/// <param name="context">
		/// Provides the context to which the installer has access to. Skyline.DataMiner.Net.AppPackages.AppInstallContext object is automatically provided by the Automation script.
		/// </param>
		/// <param name="logMethod">The app installers log method, used to write to the SLAppPackageInstaller.txt.</param>
		public LcaInstaller(AppInstallContext context, Action<string> logMethod)
		{
			// Null checks still required / valid input data check
			this.context = context;
			this.options = JsonConvert.DeserializeObject<InstallOptions>(File.ReadAllText(context.AppContentPath + InstallOptionsFileName));
			this.logMethod = logMethod;
		}

		public static void CopyFolder(string sourceFolderPath, string destinationFolderPath, bool overwrite = false)
		{
			DirectoryInfo sourceDir = new DirectoryInfo(sourceFolderPath);

			// If the destination folder doesn't exist, create it
			if (!Directory.Exists(destinationFolderPath))
			{
				Directory.CreateDirectory(destinationFolderPath);
			}

			// Copy files in the current directory
			foreach (FileInfo file in sourceDir.GetFiles())
			{
				string destFile = Path.Combine(destinationFolderPath, file.Name);
				file.CopyTo(destFile, overwrite);
			}

			// Recursively copy subdirectories
			foreach (DirectoryInfo subdir in sourceDir.GetDirectories())
			{
				string destSubdir = Path.Combine(destinationFolderPath, subdir.Name);
				CopyFolder(subdir.FullName, destSubdir, overwrite);
			}
		}

		/// <summary>
		/// Logs the provided message into the logfile "C:\Skyline DataMiner\Logging\SLAppPackageInstaller.txt".
		/// The message will also be shown during installation with the DataMiner Application
		/// Package Installer from the Skyline TaskBar Utility.
		/// </summary>
		/// <param name="message">A message you want to log or show during installation.</param>
		public void Log(string message)
		{
			logMethod(message);
		}

		/// <summary>
		/// Installs all provided low code apps in the AppContent of the package on the DMS.
		/// </summary>
		public void InstallDefaultContent()
		{
			Log("Low Code App Installation");

			var apps = Directory.GetDirectories(context.AppContentPath + LCA_FOLDERPATH);
			Log($"Installing {apps.Length} app(s)");

			var existingApps = Directory.GetDirectories(ApplicationsDirectory).Select(dir => Path.GetFileName(dir));
			var existingAppsNames = GetAppNames(existingApps);

			for (int i = 0; i < apps.Length; i++)
			{
				var app = apps[i];
				var newName = GetAppName(app);

				if (options.OverwritePreviousVersions)
				{
					CopyFolder(app, Path.Combine(ApplicationsDirectory, Path.GetFileName(app)), true);
				}
				else
				{
					newName = SafeInstallApp(existingApps, existingAppsNames, app);
				}

				Log($"[{i + 1}/{apps.Length}] Installed '{newName}'");
			}
		}

		private string SafeInstallApp(IEnumerable<string> existingApps, IEnumerable<string> existingAppsNames, string app)
		{
			// Check if the name of the app already exists
			var appName = GetAppName(app);
			int counter = 0;
			var newName = appName;
			while (existingAppsNames.Contains(newName))
			{
				counter++;
				newName = $"{appName} ({counter})";
			}

			SetAppName(app, newName);

			if (existingApps.Contains(Path.GetFileName(app)))
			{
				// Generate a new GUID for the app
				var oldId = Path.GetFileName(app);
				var newId = Guid.NewGuid().ToString();
				var destPath = Path.Combine(ApplicationsDirectory, newId);
				CopyFolder(app, destPath, false);
				foreach (var versionPath in Directory.GetDirectories(destPath))
				{
					var configPath = Path.Combine(versionPath, "App.config.json");
					var file = File.ReadAllText(configPath);
					File.WriteAllText(configPath, file.Replace(oldId, newId));
				}
			}
			else
			{
				CopyFolder(app, Path.Combine(ApplicationsDirectory, Path.GetFileName(app)), false);
			}

			return newName;
		}

		private string[] GetAppNames(IEnumerable<string> existingApps)
		{
			var names = new List<string>();
			foreach (var app in existingApps)
			{
				names.Add(GetAppName(app));
			}

			return names.Where(name => name != null).ToArray();
		}

		private string GetAppName(string appId)
		{
			try
			{
				// Get public version
				var info = System.IO.File.ReadAllText(Path.Combine(ApplicationsDirectory, appId, "App.info.json"));
				var pulicVersion = JObject.Parse(info)["PublicVersion"].Value<int>();

				// If public is not available grab draft version
				if (pulicVersion <= 0)
				{
					pulicVersion = JObject.Parse(info)["DraftVersion"].Value<int>();
				}

				// Get name
				var config = System.IO.File.ReadAllText(Path.Combine(ApplicationsDirectory, appId, $"version_{pulicVersion}", "App.config.json"));
				var name = JObject.Parse(config)["Name"].Value<string>();

				return name;
			}
			catch (Exception ex)
			{
				Log($"Could not get name of app with ID: {appId}\nException: \n{ex}");
				return null;
			}
		}

		private void SetAppName(string appId, string name)
		{
			try
			{
				// Get public version
				var info = System.IO.File.ReadAllText(Path.Combine(ApplicationsDirectory, appId, "App.info.json"));
				var pulicVersion = JObject.Parse(info)["PublicVersion"].Value<int>();

				// set name
				var config = System.IO.File.ReadAllText(Path.Combine(ApplicationsDirectory, appId, $"version_{pulicVersion}", "App.config.json"));
				var json = JObject.Parse(config);
				json["Name"] = name;
				System.IO.File.WriteAllText(Path.Combine(ApplicationsDirectory, appId, $"version_{pulicVersion}", "App.config.json"), json.ToString());
			}
			catch (Exception)
			{
				Log($"Could not set name of app with ID: {appId}, to {name}");
			}
		}
	}
}
//---------------------------------
// Themes\ThemeInstaller.cs
//---------------------------------
namespace Install_1.Themes
{
	using System;
	using System.IO;
	using System.Linq;

	using Newtonsoft.Json.Linq;

	using Skyline.DataMiner.Net;
	using Skyline.DataMiner.Net.AppPackages;

	public class ThemeInstaller
	{
		private const string Themes_Context_PATH = @"CompanionFiles\Themes\Themes.json";
		private const string Themes_DataMiner_Path = @"C:\Skyline DataMiner\dashboards\Themes.json";

		private readonly IConnection connection;
		private readonly AppInstallContext context;
		private readonly Action<string> logMethod;

		/// <summary>
		/// Initializes a new instance of the <see cref="ThemeInstaller"/> class.
		/// </summary>
		/// <param name="connection">SLNet raw connection. Can be obtained via Engine object.</param>
		/// <param name="context">
		/// Provides the context to which the installer has access to. Skyline.DataMiner.Net.AppPackages.AppInstallContext object is automatically provided by the Automation script.
		/// </param>
		/// <param name="logMethod">The app installers log method, used to write to the SLAppPackageInstaller.txt.</param>
		public ThemeInstaller(IConnection connection, AppInstallContext context, Action<string> logMethod)
		{
			this.connection = connection;
			this.context = context;
			this.logMethod = logMethod;
		}

		/// <summary>
		/// Installs all provided images in the AppContent of the package on the DMS.
		/// </summary>
		public void InstallDefaultContent()
		{
			Log("Low Code App Themes Installation");

			var appThemesContent = File.ReadAllText(context.AppContentPath + Themes_Context_PATH);
			var appThemes = JObject.Parse(appThemesContent)["Themes"] as JArray;

			if (appThemes.Any())
			{
				Log($"Found {appThemes.Count} theme(s) to install.");
			}
			else
			{
				Log("No themes found, skipping this step.");
				return;
			}

			// Check if themes file exists
			if (!File.Exists(Themes_DataMiner_Path))
			{
				Log("C:\\Skyline DataMiner\\dashboards\\Themes.json file does not exists, creating it.");
				File.WriteAllText(Themes_DataMiner_Path, appThemesContent);
				return;
			}

			Log("Parsing C:\\Skyline DataMiner\\dashboards\\Themes.json");
			var allThemesContent = File.ReadAllText(Themes_DataMiner_Path);
			var allThemesFull = JObject.Parse(allThemesContent);
			var allThemes = allThemesFull["Themes"] as JArray;
			var allThemeIds = allThemes.Select(t => t["ID"].Value<int>()).ToList();

			for (int i = 0; i < appThemes.Count; i++)
			{
				var theme = appThemes[i];
				var appThemeId = theme["ID"].Value<int>();
				var appThemeName = theme["Name"].Value<string>();

				var existingTheme = allThemes.FirstOrDefault(t => t["Name"].Value<string>() == appThemeName);
				if (existingTheme != null)
				{
					var existingThemeId = existingTheme["ID"].Value<int>();
					if (existingThemeId != appThemeId && allThemeIds.Exists(x => x == appThemeId))
					{
						var newId = allThemeIds.Max() + 1;
						theme["ID"] = newId;
						appThemeId = newId;
						allThemeIds.Add(newId);
					}

					var existingThemeIndex = allThemes.IndexOf(existingTheme);
					allThemes[existingThemeIndex] = theme;
				}
				else
				{
					if (allThemeIds.Exists(x => x == appThemeId))
					{
						var newId = allThemeIds.Max() + 1;
						theme["ID"] = newId;
						appThemeId = newId;
						allThemeIds.Add(newId);
					}

					allThemes.Add(theme);
				}

				Log($"[{i + 1}/{appThemes.Count}] Installed '{appThemeName}'");
			}

			File.WriteAllText(Themes_DataMiner_Path, allThemesFull.ToString());
			connection.SyncFile(Themes_DataMiner_Path);
		}

		/// <summary>
		/// Logs the provided message into the logfile "C:\Skyline DataMiner\Logging\SLAppPackageInstaller.txt".
		/// The message will also be shown during installation with the DataMiner Application
		/// Package Installer from the Skyline TaskBar Utility.
		/// </summary>
		/// <param name="message">A message you want to log or show during installation.</param>
		public void Log(string message)
		{
			logMethod(message);
		}
	}
}]]>
			</Value>
			<!--<Param type="debug">true</Param>-->
			<Message />
			<Param type="ref">System.Transactions.dll</Param>
			<Param type="ref">Microsoft.CSharp.dll</Param>
			<Param type="ref">System.Data.DataSetExtensions.dll</Param>
			<Param type="ref">System.IO.Compression.FileSystem.dll</Param>
			<Param type="ref">AlphaFS.dll</Param>
			<Param type="ref">Newtonsoft.Json.dll</Param>
			<Param type="ref">Skyline.DataMiner.CICD.FileSystem.dll</Param>
			<Param type="ref">System.IO.Compression.dll</Param>
			<Param type="ref">System.IO.Compression.ZipFile.dll</Param>
			<Param type="ref">Skyline.DataMiner.Core.AppPackageInstaller.dll</Param>
			<Param type="ref">System.Threading.Tasks.Dataflow.dll</Param>
			<Param type="ref">Skyline.DataMiner.Core.DataMinerSystem.Common.dll</Param>
			<Param type="ref">Skyline.DataMiner.Core.DataMinerSystem.Automation.dll</Param>
		</Exe>
	</Script>
</DMSScript>